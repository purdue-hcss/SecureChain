import json
from typing import Dict, List, Set, Tuple

from rdflib import RDF, Graph, Literal, URIRef
from tqdm import tqdm

from knowledge_graph_constant import (
    NS,
    PROPERTY_HAS_HARDWARE_VERSION,
    PROPERTY_HAS_SOFTWARE_VERSION,
    PROPERTY_IDENTIFIER,
    PROPERTY_NAME,
    PROPERTY_VERSION_NAME,
    PROPERTY_VULNERABILITY_TYPE,
    PROPERTY_VULNERABLE_TO,
    cve_uri,
    cwe_uri,
    deps_dev_ver_uri,
)


def build_indexes(
    g: Graph, asset_type: URIRef, has_version_prop: URIRef, version_name_prop: URIRef
) -> Tuple[Dict[str, Set[URIRef]], Dict[Tuple[URIRef, str], Set[URIRef]]]:
    name_to_asset: Dict[str, Set[URIRef]] = {}
    ver_index: Dict[Tuple[URIRef, str], Set[URIRef]] = {}

    for asset, _, name_lit in g.triples((None, PROPERTY_NAME, None)):
        if (asset, RDF.type, asset_type) in g:
            name_to_asset.setdefault(str(name_lit), set()).add(asset)

    for asset in g.subjects(RDF.type, asset_type):
        for _, _, ver in g.triples((asset, has_version_prop, None)):
            for _, _, ver_name_lit in g.triples((ver, version_name_prop, None)):
                ver_index.setdefault((asset, str(ver_name_lit)), set()).add(ver)

    return name_to_asset, ver_index


def add_vulnerability_edges_for_assets(
    g: Graph,
    vuln_json_file: str,
    asset_kind: str = "software",  # or "hardware"
) -> None:
    if asset_kind == "software":
        ASSET_CLS = NS.Software
        HAS_VERSION_PROP = PROPERTY_HAS_SOFTWARE_VERSION
    elif asset_kind == "hardware":
        ASSET_CLS = NS.Hardware
        HAS_VERSION_PROP = PROPERTY_HAS_HARDWARE_VERSION
    else:
        raise ValueError("asset_kind must be 'software' or 'hardware'")

    # ---------- 读取 CVE → 列表(pkg/ver) ----------
    with open(vuln_json_file, encoding="utf-8") as f:
        vuln_map: Dict[str, List[str]] = json.load(f)

    # ---------- 建立索引 ----------
    name_to_asset, version_index = build_indexes(
        g, ASSET_CLS, HAS_VERSION_PROP, PROPERTY_VERSION_NAME
    )

    # ---------- 辅助集合 ----------
    seen_cve: Set[URIRef] = set()
    seen_edge: Set[Tuple[URIRef, URIRef]] = set()

    # ---------- 主循环 ----------
    for cve_id, target_list in tqdm(
        vuln_map.items(), desc=f"Linking CVE to {asset_kind} versions"
    ):
        # ---- CVE 节点 ----
        cve_uri_ = cve_uri(cve_id)
        if cve_uri_ not in seen_cve:
            g.add((cve_uri_, RDF.type, NS.Vulnerability))
            g.add((cve_uri_, PROPERTY_IDENTIFIER, Literal(cve_id)))
            seen_cve.add(cve_uri_)

        # ---- 遍历每个 "pkg/ver" ----
        for pkg_ver in target_list:
            if "/" not in pkg_ver:
                continue
            pkg, ver = pkg_ver.split("/", 1)

            # =========== ① 先试图复用已有节点 ===========
            matched_versions: Set[URIRef] = set()
            for asset in name_to_asset.get(pkg, []):
                matched_versions |= version_index.get((asset, ver), set())

            # 特殊情况：星号 → 把此 asset 的所有版本都连边
            if ver == "*":
                for asset in name_to_asset.get(pkg, []):
                    for (soft_uri, v_name), verset in version_index.items():
                        if soft_uri == asset:
                            matched_versions |= verset

            # =========== ③ 写 vulnerableTo 边 ===========
            for ver_uri in matched_versions:
                edge = (ver_uri, PROPERTY_VULNERABLE_TO, cve_uri_)
                if edge not in seen_edge:
                    g.add(edge)
                    seen_edge.add(edge)


def load_advisory_map(advisories_jsonl: str) -> Dict[str, List[str]]:
    amap = {}
    with open(advisories_jsonl, "rb") as f:
        for line in f:
            adv = json.loads(line)
            aliases = [a for a in adv.get("Aliases", []) if a.startswith("CVE-")]
            if aliases:
                amap[adv["SourceID"]] = aliases
    return amap


def add_deps_dev_advisory_vulnerability_relations(
    g: Graph, package_versions_jsonl: str, advisories_jsonl: str, ecosystem: str
) -> None:
    adv_map = load_advisory_map(advisories_jsonl)

    seen_cve, seen_edge = set(), set()

    with open(package_versions_jsonl, "rb") as f:
        for line in tqdm(f, desc=f"Linking advisories ({ecosystem})"):
            item = json.loads(line)
            name = item["Name"].strip()
            version = item["Version"].strip()

            ver_uri_ = deps_dev_ver_uri(ecosystem, name, version)

            # 跳过没有 advisories 的版本
            advisories = item.get("Advisories", [])
            if not advisories:
                continue

            # 遍历 advisories
            for adv in advisories:
                adv_id = adv.get("SourceID")
                if not adv_id:
                    continue
                cve_ids = adv_map.get(adv_id, [])
                for cve in cve_ids:
                    cve_uri_ = cve_uri(cve)
                    if cve_uri_ not in seen_cve:
                        g.add((cve_uri_, RDF.type, NS.Vulnerability))
                        g.add((cve_uri_, PROPERTY_IDENTIFIER, Literal(cve)))
                        seen_cve.add(cve_uri_)

                    triple = (ver_uri_, PROPERTY_VULNERABLE_TO, cve_uri_)
                    if triple not in seen_edge:
                        g.add(triple)
                        seen_edge.add(triple)


def add_cve_to_cwe_edges(g: Graph, cve_to_cwe_file: str) -> None:
    with open(cve_to_cwe_file, encoding="utf-8") as f:
        items = json.load(f)

    seen_cve: set[URIRef] = set()
    seen_cwe: set[URIRef] = set()
    seen_edge: set[tuple] = set()

    for item in tqdm(items, desc="Adding CVE–CWE relations"):
        cve_id: str = item["cve_id"]
        cwe_ids: list[str] = item["cwe_ids"]

        cve_uri_ = cve_uri(cve_id)
        if cve_uri_ not in seen_cve:
            g.add((cve_uri_, RDF.type, NS.Vulnerability))
            g.add((cve_uri_, PROPERTY_IDENTIFIER, Literal(cve_id)))
            seen_cve.add(cve_uri_)

        for cwe_id in cwe_ids:
            num = cwe_id.split("-")[-1]
            cwe_uri_ = cwe_uri(num)
            if cwe_uri_ not in seen_cwe:
                g.add((cwe_uri_, RDF.type, NS.VulnerabilityType))
                g.add((cwe_uri_, PROPERTY_IDENTIFIER, Literal(cwe_id)))
                seen_cwe.add(cwe_uri_)

            edge = (cve_uri_, PROPERTY_VULNERABILITY_TYPE, cwe_uri_)
            if edge not in seen_edge:
                g.add(edge)
                seen_edge.add(edge)
